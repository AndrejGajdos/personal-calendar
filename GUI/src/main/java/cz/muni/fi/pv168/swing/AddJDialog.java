package cz.muni.fi.pv168.swing;

import cz.muni.fi.pv168.workers.AddEventWorker;
import java.beans.PropertyVetoException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import pv168.mydates.CalendarManagerImpl;
import pv168.mydates.Event;
import pv168.mydates.EventManagerImpl;

/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
/**
 *
 * @author Andrej Gajdos
 */
public class AddJDialog extends javax.swing.JDialog {

private final static Logger logger = Logger.getLogger(EditJDialog.class);
private Event event = new Event();
private TableEventModel tem;
private Calendar cal = Calendar.getInstance();
private CalendarManagerImpl cmi;
private EventManagerImpl emi;

/**
 * Creates new form AddJDialog
 */
public AddJDialog(java.awt.Frame parent, boolean modal) {

        super(parent, modal);
        initComponents();
        this.setTitle("Add event");

        /**
         * Creates new form AddEvent
         */
}

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextNameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextPlaceField = new javax.swing.JTextField();
        jTextLabelField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jTextField6 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        datePicker2 = new com.michaelbaranov.microba.calendar.DatePicker();
        datePicker1 = new com.michaelbaranov.microba.calendar.DatePicker();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("label");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("name");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("place");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Add event");

        jButton1.setLabel("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton1clickAddEvent(evt);
                        }
                });

        jCheckBox1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCheckBox1.setLabel("All day");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jCheckBox1ActionPerformed(evt);
                        }
                });

        jButton2.setLabel("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton2clickCancelAddEvent(evt);
                        }
                });

        jTextField6.setText("00:00");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("timeTo");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("timeFrom");

        jTextField7.setText("00:00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                          .addGap(30, 30, 30)
                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                  .addComponent(jCheckBox1)
                                                                  .addGap(61, 61, 61))
                                                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                              .addGap(14, 14, 14)
                                              .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel4)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                              .addGap(18, 18, 18)
                                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jTextPlaceField, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                            .addComponent(jTextLabelField, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                                                                            .addComponent(datePicker1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                            .addComponent(datePicker2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                            .addComponent(jTextField7, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                                                                            .addComponent(jTextField6)))))
                                    .addGroup(layout.createSequentialGroup()
                                              .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                              .addGap(25, 25, 25)
                                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jTextNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))
                          .addContainerGap(27, Short.MAX_VALUE))
                );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                          .addGap(13, 13, 13)
                          .addComponent(jLabel6)
                          .addGap(18, 18, 18)
                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextPlaceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                              .addGap(12, 12, 12)
                                              .addComponent(jLabel3))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                              .addComponent(jTextLabelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                          .addGap(18, 18, 18)
                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                              .addComponent(jLabel4)
                                              .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel5)
                                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                              .addComponent(jCheckBox1))
                                    .addComponent(datePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                          .addGap(18, 18, 18)
                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton2)
                                    .addComponent(jButton1))
                          .addContainerGap(33, Short.MAX_VALUE))
                );

        pack();
}    // </editor-fold>//GEN-END:initComponents

//----------------OK_CLICK----------------

private void jButton1clickAddEvent(java.awt.event.ActionEvent evt) {    //GEN-FIRST:event_jButton1clickAddEvent

        if (jTextNameField.getText().length() != 0
            && jTextField6.getText().length() != 0
            && jTextField7.getText().length() != 0) {
                jButton1.setEnabled(true);
        }

        if (validateTime()) {

                // set event date from date picker

                SimpleDateFormat formatter = new SimpleDateFormat("dd-MMM-yyyy");

                String sTimeFrom = formatter.format(datePicker1.getDate());
                String HMFrom = jTextField6.getText();

                String sTimeTo = formatter.format(datePicker2.getDate());
                String HMTo = jTextField7.getText();

                sTimeFrom += " " + HMFrom;
                sTimeTo += " " + HMTo;

                SimpleDateFormat formatter2 = new SimpleDateFormat("dd-MMM-yyyy HH:mm");

                Calendar timeFrom = Calendar.getInstance();
                Calendar timeTo = Calendar.getInstance();
                try {
                        timeFrom.setTime(formatter2.parse(sTimeFrom));
                        timeTo.setTime(formatter2.parse(sTimeTo));
                } catch (ParseException ex) {
                        logger.error(ex);
                }

                event.setTimeFrom(timeFrom);
                event.setTimeTo(timeTo);

                if (jTextNameField.getText().length() != 0) {
                        event.setname(jTextNameField.getText());
                } else {
                        JOptionPane.showMessageDialog(null, "Zadajte prosím meno udalosti.");
                        jButton1.setEnabled(false);
                }

                // set event place and label from text fields

                event.setplace(jTextPlaceField.getText());
                event.setlabel(jTextLabelField.getText());

                // set event in database

                AddEventWorker worker = new AddEventWorker(tem, event, cal, emi, cmi);
                worker.execute();

                tem.addEvent(event);

                this.dispose();
        }

}    //GEN-LAST:event_jButton1clickAddEvent

//----------------CHECK_BOX_CLICK----------------

private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {    //GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
                jTextField6.setText("00:00");
                jTextField7.setText("00:00");
                jTextField6.setEditable(false);
                jTextField7.setEditable(false);
        } else {
                jTextField6.setEditable(true);
                jTextField7.setEditable(true);

        }

}    //GEN-LAST:event_jCheckBox1ActionPerformed

//----------------CANCEL_CLICK----------------

private void jButton2clickCancelAddEvent(java.awt.event.ActionEvent evt) {    //GEN-FIRST:event_jButton2clickCancelAddEvent
        this.dispose();
}    //GEN-LAST:event_jButton2clickCancelAddEvent

//----------------VALIDATE_TEXBOXES----------------

private boolean validateTime() {

        String HMTo = jTextField7.getText();
        String HMFrom = jTextField6.getText();

        for (int i = 0; i < HMFrom.length(); i++) {
                char tempC;
                int tempI = 0;

                char tempC2;
                int tempI2 = 0;

                tempC = HMFrom.charAt(i);
                tempC2 = HMTo.charAt(i);

                if (i != 2) {
                        tempI = Character.getNumericValue(tempC);
                        tempI2 = Character.getNumericValue(tempC2);
                }

                switch (i) {
                case 0:
                        if (tempI > 2 || tempI < 0 || tempI2 > 2 || tempI2 < 0) {
                                JOptionPane.showMessageDialog(null, "Opravte prosím formát alebo hodnotu času udalosti.");
                                jButton1.setEnabled(false);
                                return false;
                        }
                        break;
                case 2:
                        if (tempC != ':' || tempC2 != ':') {
                                JOptionPane.showMessageDialog(null, "Opravte prosím formát alebo hodnotu času udalosti.");
                                jButton1.setEnabled(false);
                                return false;
                        }
                        break;
                case 3:
                        if (tempI > 6 || tempI < 0 || tempI2 > 6 || tempI2 < 0) {
                                JOptionPane.showMessageDialog(null, "Opravte prosím formát alebo hodnotu času udalosti.");
                                jButton1.setEnabled(false);
                                return false;
                        }
                        break;
                default:
                        if (tempI < 0 || tempI2 < 0) {
                                JOptionPane.showMessageDialog(null, "Opravte prosím formát alebo hodnotu času udalosti.");
                                jButton1.setEnabled(false);
                                return false;
                        }
                        break;
                }



        }

        return true;

}

// set class attributes and dates in date picker

public void setRequiredElements(TableEventModel tem, Calendar cld, CalendarManagerImpl cmi, EventManagerImpl emi)
{
        this.tem = tem;
        this.cal = cld;
        this.cmi = cmi;
        this.emi = emi;
        try {
                datePicker1.setDate(cal.getTime());
                datePicker2.setDate(cal.getTime());
        } catch (PropertyVetoException ex) {
                logger.error(ex);
        }

}

/**
 * @param args the command line arguments
 */
public static void main(String args[]) {

        PropertyConfigurator.configure("log4j.properties");
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                        if ("Nimbus".equals(info.getName())) {
                                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                break;
                        }
                }
        } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(AddJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(AddJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(AddJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(AddJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

                        public void run() {
                                AddJDialog dialog = new AddJDialog(new javax.swing.JFrame(), true);
                                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                                        @Override
                                        public void windowClosing(java.awt.event.WindowEvent e) {
                                                System.exit(0);
                                        }
                                });
                                dialog.setVisible(true);
                        }
                });
}
// Variables declaration - do not modify//GEN-BEGIN:variables
private com.michaelbaranov.microba.calendar.DatePicker datePicker1;
private com.michaelbaranov.microba.calendar.DatePicker datePicker2;
private javax.swing.JButton jButton1;
private javax.swing.JButton jButton2;
private javax.swing.JCheckBox jCheckBox1;
private javax.swing.JLabel jLabel1;
private javax.swing.JLabel jLabel2;
private javax.swing.JLabel jLabel3;
private javax.swing.JLabel jLabel4;
private javax.swing.JLabel jLabel5;
private javax.swing.JLabel jLabel6;
private javax.swing.JTextField jTextField6;
private javax.swing.JTextField jTextField7;
private javax.swing.JTextField jTextLabelField;
private javax.swing.JTextField jTextNameField;
private javax.swing.JTextField jTextPlaceField;
// End of variables declaration//GEN-END:variables
}
